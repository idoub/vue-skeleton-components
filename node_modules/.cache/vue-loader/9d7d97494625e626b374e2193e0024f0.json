{"remainingRequest":"/Users/idoub/.nvm/versions/node/v10.16.2/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/idoub/Workspace/Javascript/components/components/JCheckboxList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/idoub/Workspace/Javascript/components/components/JCheckboxList.vue","mtime":1581002195549},{"path":"/Users/idoub/.nvm/versions/node/v10.16.2/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/idoub/.nvm/versions/node/v10.16.2/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/idoub/.nvm/versions/node/v10.16.2/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport JCheckbox from './JCheckbox';\n\nexport default {\n  name: 'JCheckboxList',\n  components: {\n    JCheckbox,\n  },\n  props: {\n    group: {\n      type: String,\n      default: () => Math.random(),\n    },\n    options: {\n      type: Array,\n      default: () => ([]),\n    },\n    value: {\n      type: Array,\n      default: () => ([]),\n    },\n  },\n  data() {\n    return {\n      localVal: new Set(this.value),\n    };\n  },\n  methods: {\n    input(newVal) {\n      this.localVal[this.localVal.has(newVal) ? 'delete' : 'add'](newVal);\n      this.$emit('input', Array.from(this.localVal));\n    }\n  }\n}\n",{"version":3,"sources":["JCheckboxList.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JCheckboxList.vue","sourceRoot":"components","sourcesContent":["<script>\nimport JCheckbox from './JCheckbox';\n\nexport default {\n  name: 'JCheckboxList',\n  components: {\n    JCheckbox,\n  },\n  props: {\n    group: {\n      type: String,\n      default: () => Math.random(),\n    },\n    options: {\n      type: Array,\n      default: () => ([]),\n    },\n    value: {\n      type: Array,\n      default: () => ([]),\n    },\n  },\n  data() {\n    return {\n      localVal: new Set(this.value),\n    };\n  },\n  methods: {\n    input(newVal) {\n      this.localVal[this.localVal.has(newVal) ? 'delete' : 'add'](newVal);\n      this.$emit('input', Array.from(this.localVal));\n    }\n  }\n}\n</script>\n\n<template>\n  <div>\n    <j-checkbox\n      :descriptor=\"option.descriptor\"\n      :key=\"option.key\"\n      :value=\"option.key\"\n      @input=\"input\"\n      :name=\"group\"\n      v-for=\"(option) in options\"\n    ></j-checkbox>\n  </div>\n</template>\n"]}]}