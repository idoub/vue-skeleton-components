{"remainingRequest":"/Users/idoub/.nvm/versions/node/v10.16.2/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/idoub/Workspace/Javascript/components/components/BaseInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/idoub/Workspace/Javascript/components/components/BaseInput.vue","mtime":1580926492608},{"path":"/Users/idoub/.nvm/versions/node/v10.16.2/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/idoub/.nvm/versions/node/v10.16.2/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/idoub/.nvm/versions/node/v10.16.2/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n\nexport default {\n  data() {\n    return {\n      localFormatter: this.formatter,\n      localState: this.state || 'initial',\n      localValidator: this.validator\n    }\n  },\n  inheritAttrs: false,\n  props: {\n    descriptor: {\n      type: String,\n      default: '',\n    },\n    formatter: {\n      type: Function,\n      default: (val) => {\n        return val;\n      },\n    },\n    state: {\n      type: String,\n      default: 'initial',\n    },\n    validator: {\n      type: Function,\n      default: () => {\n        return {\n          passed: true,\n          errorMessage: '',\n          successMessage: '',\n        }\n      },\n    },\n    value: {\n      type: String,\n      default: '',\n    }\n  },\n  methods: {\n    change(evt) {\n      const {target:{value}} = evt;\n      // Run validation\n      const validation = this.localValidator(value);\n      // Failed/passed validation, change state\n      if(!validation.passed) this.stateChange('error', validation.errorMessage);\n      else this.stateChange('success', validation.successMessage);\n      // Emit event to tell parent that there's a new value\n      this.$emit('input', value);\n    },\n    focus(evt) {\n      // Can change state\n      this.stateChange('focus');\n      // Emit event to tell parent that the focus is here\n      this.$emit('focus', evt);\n    },\n    input(evt) {\n      const {target:{value}} = evt;\n      // Update state to remove any error/success state\n      this.stateChange('initial');\n      // Run formatting\n      const formattedValue = evt.target.value = this.localFormatter(value);\n      // Emit event to tell parent that user is typing\n      this.$emit('input', formattedValue);\n    },\n    stateChange(state, messaging) {\n      // Modify state\n      this.localState = state;\n      this.messaging = messaging;\n      // Emit event to tell parent the current state\n      this.$emit('state-change', {state, messaging});\n    },\n  },\n}\n",{"version":3,"sources":["BaseInput.vue"],"names":[],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseInput.vue","sourceRoot":"components","sourcesContent":["<!-- This component is meant to be extended, not use as a component -->\n<script>\nexport default {\n  data() {\n    return {\n      localFormatter: this.formatter,\n      localState: this.state || 'initial',\n      localValidator: this.validator\n    }\n  },\n  inheritAttrs: false,\n  props: {\n    descriptor: {\n      type: String,\n      default: '',\n    },\n    formatter: {\n      type: Function,\n      default: (val) => {\n        return val;\n      },\n    },\n    state: {\n      type: String,\n      default: 'initial',\n    },\n    validator: {\n      type: Function,\n      default: () => {\n        return {\n          passed: true,\n          errorMessage: '',\n          successMessage: '',\n        }\n      },\n    },\n    value: {\n      type: String,\n      default: '',\n    }\n  },\n  methods: {\n    change(evt) {\n      const {target:{value}} = evt;\n      // Run validation\n      const validation = this.localValidator(value);\n      // Failed/passed validation, change state\n      if(!validation.passed) this.stateChange('error', validation.errorMessage);\n      else this.stateChange('success', validation.successMessage);\n      // Emit event to tell parent that there's a new value\n      this.$emit('input', value);\n    },\n    focus(evt) {\n      // Can change state\n      this.stateChange('focus');\n      // Emit event to tell parent that the focus is here\n      this.$emit('focus', evt);\n    },\n    input(evt) {\n      const {target:{value}} = evt;\n      // Update state to remove any error/success state\n      this.stateChange('initial');\n      // Run formatting\n      const formattedValue = evt.target.value = this.localFormatter(value);\n      // Emit event to tell parent that user is typing\n      this.$emit('input', formattedValue);\n    },\n    stateChange(state, messaging) {\n      // Modify state\n      this.localState = state;\n      this.messaging = messaging;\n      // Emit event to tell parent the current state\n      this.$emit('state-change', {state, messaging});\n    },\n  },\n}\n</script>\n"]}]}